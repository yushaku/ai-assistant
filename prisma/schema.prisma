generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// https://next-auth.js.org/v3/adapters/prisma
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Thread        Thread[]
  Account       Account[]
  Session       Session[]
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  title     String    @unique
  Prompt    Prompt[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Prompt {
  id         String    @id @default(cuid())
  content    String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Thread {
  id        String    @id @default(cuid())
  title     String
  Message   Message[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Message {
  id        String    @id @default(cuid())
  role      String
  content   String
  threadId  String
  thead     Thread    @relation(fields: [threadId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Documents {
  id          String    @id @default(cuid())
  title       String
  url         String?
  content     String?
  pineconeIds String[]  @default([])
  isTrained   Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}
